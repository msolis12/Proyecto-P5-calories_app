package com.example.appcalorica.repository

import com.example.appcalorica.model.ExerciseEntry
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.tasks.await

class FirebaseExerciseRepository {
    private val db = FirebaseFirestore.getInstance()
    private val exercises = db.collection("exercise_entries")

    // ‚ûï Agregar ejercicio con userId
    suspend fun addExercise(entry: ExerciseEntry) {
        val entryWithUser = hashMapOf(
            "name" to entry.name,
            "caloriesBurned" to entry.caloriesBurned,
            "userId" to entry.userId
        )
        exercises.add(entryWithUser).await()
    }

    // üîç Obtener solo ejercicios de un usuario
    suspend fun getExercisesByUserId(userId: String): List<ExerciseEntry> {
        val snapshot = exercises
            .whereEqualTo("userId", userId)
            .get()
            .await()
        return snapshot.toObjects(ExerciseEntry::class.java)
    }

    // ‚ùå Eliminar ejercicio espec√≠fico del usuario
    suspend fun deleteExerciseByName(name: String, userId: String) {
        val snapshot = exercises
            .whereEqualTo("name", name)
            .whereEqualTo("userId", userId)
            .get()
            .await()
        for (doc in snapshot.documents) {
            doc.reference.delete().await()
        }
    }
}
